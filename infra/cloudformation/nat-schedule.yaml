AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda to enable/disable NAT Gateway via CloudFormation stack

Resources:
  NatGatewayControlLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NatGatewayControlLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NatGatewayControlPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNatGateway
                  - ec2:DeleteNatGateway
                  - ec2:DescribeNatGateways
                  - ec2:DescribeSubnets
                  - ec2:DescribeAddresses
                  - ec2:ReleaseAddress
                  - ec2:DisassociateAddress
                  - ec2:CreateRoute
                  - ec2:ReplaceRoute
                  - ec2:DeleteRoute
                  - ec2:DescribeRouteTables
                  - ec2:CreateTags
                  - cloudformation:CreateStack
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResources
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/NATGatewayStack/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: arn:aws:s3:::miracle-implied-cft-template/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  CodebuildProjectControlLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodebuildProjectControlLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodebuildProjectControlPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:UpdateProject
                Resource:
                  - !Sub
                    - arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/{CodeBuildProjectName}
                    - { CodeBuildProjectName: !ImportValue CodeBuildProjectName }

  NatGatewayToggleFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ToggleNatGateway
      Handler: toggle-nat-gateway.handler
      Role: !GetAtt NatGatewayControlLambdaRole.Arn
      Runtime: python3.13
      Timeout: 300
      Environment:
        Variables:
          NAT_GATEWAY_STACK: NATGatewayStack
          BUCKET_NAME: miracle-implied-cft-template
          PATH_TO_FILE: nat-gateway.yaml
      Code:
        S3Bucket: miracle-implied-cft-template
        S3Key: lambda-functions/toggle-nat-gateway.zip

  CodebuildProjectToggleFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ToggleCodebuildProject
      Handler: toggle-codebuild-project.handler
      Role: !GetAtt CodebuildProjectControlLambdaRole.Arn
      Runtime: python3.13
      Timeout: 300
      Environment:
        Variables:
          PROJECT_NAME: !ImportValue CodeBuildProjectName
      Code:
        S3Bucket: miracle-implied-cft-template
        S3Key: lambda-functions/toggle-codebuild-project.zip

  # EventBridge Rules
  ScheduleOff:
    Type: AWS::Events::Rule
    Properties:
      Name: ScheduleTurnOffNAT
      ScheduleExpression: cron(0 15 * * ? *) # 10PM UTC daily
      State: DISABLED
      Targets:
        - Arn: !GetAtt NatGatewayToggleFunction.Arn
          Id: "TurnOffNAT"
          Input: '{"action": "OFF"}'

  ScheduleOn:
    Type: AWS::Events::Rule
    Properties:
      Name: ScheduleTurnOnNAT
      ScheduleExpression: cron(0 1 * * ? *) # 8AM UTC daily
      State: DISABLED
      Targets:
        - Arn: !GetAtt NatGatewayToggleFunction.Arn
          Id: "TurnOnNAT"
          Input: '{"action": "ON"}'

  LambdaInvokePermissionOff:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NatGatewayToggleFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleOff.Arn

  LambdaInvokePermissionOn:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NatGatewayToggleFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleOn.Arn

Outputs:
  LambdaFunctionName:
    Value: !Ref NatGatewayToggleFunction
  ToggleRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
